diff --git a/common/autoconf/boot-jdk.m4 b/common/autoconf/boot-jdk.m4
--- a/common/autoconf/boot-jdk.m4
+++ b/common/autoconf/boot-jdk.m4
@@ -305,7 +305,8 @@
   BOOT_JDK_SOURCETARGET="-source 8 -target 8"
   AC_SUBST(BOOT_JDK_SOURCETARGET)
 
-  ADD_JVM_ARG_IF_OK([--patch-module foo=bar], dummy, [$JAVA])
+  #ADD_JVM_ARG_IF_OK([--patch-module foo=bar], dummy, [$JAVA])
+  ADD_JVM_ARG_IF_OK([-Xpatch:foo=bar], dummy, [$JAVA])
   AC_MSG_CHECKING([if Boot JDK supports modules])
   if test "x$JVM_ARG_OK" = "xtrue"; then
     AC_MSG_RESULT([yes])
@@ -526,8 +527,8 @@
     fi
   fi
 
-  JMOD="$BUILD_JDK/bin/jmod"
-  JLINK="$BUILD_JDK/bin/jlink"
+  JMOD="$BUILD_JDK/bin/jmod -J--patch-module -Jjava.base=$BUILD_JDK/../j9classes/java.base -J-Djava.lang.invoke.stringConcat=BC_SB"
+  JLINK="$BUILD_JDK/bin/jlink -J--patch-module -Jjava.base=$BUILD_JDK/../j9classes/java.base -J-Djava.lang.invoke.stringConcat=BC_SB"
   AC_SUBST(JMOD)
   AC_SUBST(JLINK)
 
diff --git a/common/autoconf/flags.m4 b/common/autoconf/flags.m4
--- a/common/autoconf/flags.m4
+++ b/common/autoconf/flags.m4
@@ -71,6 +71,19 @@
   CXXFLAGS="$EXTRA_CXXFLAGS"
   LDFLAGS="$EXTRA_LDFLAGS"
   CPPFLAGS=""
+
+  # Check whether --with-j9 was given.
+  BUILD_OPENJ9=false
+  AC_ARG_WITH(j9, [AS_HELP_STRING([--with-j9],
+  [Build J9 VM sources])])
+  if test "x$with-j9" != x; then
+     if ! (test -d $SRC_ROOT/j9vm); then
+       AC_MSG_ERROR(["Cannot locate the path to OpenJ9 sources!"])
+     fi
+     BUILD_OPENJ9=true
+  fi
+
+  AC_SUBST(BUILD_OPENJ9)
 ])
 
 # Setup the sysroot flags and add them to global CFLAGS and LDFLAGS so
@@ -1157,7 +1170,8 @@
     $2JDKLIB_LIBS=""
   else
     $2JAVA_BASE_LDFLAGS="${$2JAVA_BASE_LDFLAGS} \
-        -L\$(SUPPORT_OUTPUTDIR)/modules_libs/java.base\$(OPENJDK_$1_CPU_LIBDIR)"
+        -L\$(SUPPORT_OUTPUTDIR)/modules_libs/java.base\$(OPENJDK_$1_CPU_LIBDIR) \
+        -L\$(BOOT_JDK)/lib/\$(OPENJDK_$1_CPU_LIBDIR)/default"
 
     if test "x$1" = "xTARGET"; then
     # On some platforms (mac) the linker warns about non existing -L dirs.
diff --git a/common/autoconf/source-dirs.m4 b/common/autoconf/source-dirs.m4
--- a/common/autoconf/source-dirs.m4
+++ b/common/autoconf/source-dirs.m4
@@ -74,7 +74,7 @@
     cd "$with_import_hotspot"
     HOTSPOT_DIST="`pwd`"
     cd "$CURDIR"
-    if ! (test -d $HOTSPOT_DIST/lib && test -d $HOTSPOT_DIST/jre/lib); then
+    if ! (test -d $HOTSPOT_DIST/lib); then
       AC_MSG_ERROR([You have to import hotspot from a full jdk image or hotspot build dist dir!])
     fi
     AC_MSG_CHECKING([if hotspot should be imported])
diff --git a/common/autoconf/spec.gmk.in b/common/autoconf/spec.gmk.in
--- a/common/autoconf/spec.gmk.in
+++ b/common/autoconf/spec.gmk.in
@@ -570,8 +570,10 @@
 JAVAC_FLAGS?=@JAVAC_FLAGS@
 
 
-BUILD_JAVA_FLAGS := @BOOTCYCLE_JVM_ARGS_BIG@
+BUILD_JAVA_FLAGS := @BOOTCYCLE_JVM_ARGS_BIG@ --patch-module java.base=@FIXPATH@$(BUILD_JDK)/../j9classes/java.base -Djava.lang.invoke.stringConcat=BC_SB
+BUILDJAVA_FLAGS_JAVAC := -J--patch-module -Jjava.base=@FIXPATH@$(BUILD_JDK)/../j9classes/java.base -J-Djava.lang.invoke.stringConcat=BC_SB
 BUILD_JAVA=@FIXPATH@ $(BUILD_JDK)/bin/java $(BUILD_JAVA_FLAGS)
+BUILD_JAVAC=@FIXPATH@ $(BUILD_JDK)/bin/javac $(BUILDJAVA_FLAGS_JAVAC)
 
 # Use ?= as this can be overridden from bootcycle-spec.gmk
 BOOT_JDK_MODULAR ?= @BOOT_JDK_MODULAR@
@@ -580,7 +582,7 @@
     jdk.jdeps jdk.javadoc jdk.rmic
 ifeq ($(BOOT_JDK_MODULAR), true)
   INTERIM_OVERRIDE_MODULES_ARGS = $(foreach m, $(INTERIM_OVERRIDE_MODULES), \
-      --patch-module $m=$(BUILDTOOLS_OUTPUTDIR)/override_modules/$m)
+      -Xpatch:$m=$(BUILDTOOLS_OUTPUTDIR)/override_modules/$m)
   INTERIM_LANGTOOLS_ARGS = $(INTERIM_OVERRIDE_MODULES_ARGS)
   JAVAC_MAIN_CLASS = -m jdk.compiler/com.sun.tools.javac.Main
   JAVADOC_MAIN_CLASS = -m jdk.javadoc/jdk.javadoc.internal.tool.Main
@@ -608,6 +610,10 @@
   RC_FLAGS:=@RC_FLAGS@
 endif
 
+
+# OpenJ9 build flag
+BUILD_OPENJ9:=@BUILD_OPENJ9@
+
 # Tools adhering to a minimal and common standard of posix compliance.
 AWK:=@AWK@
 BASENAME:=@BASENAME@
diff --git a/make/CreateJmods.gmk b/make/CreateJmods.gmk
--- a/make/CreateJmods.gmk
+++ b/make/CreateJmods.gmk
@@ -43,7 +43,7 @@
     $(SUPPORT_OUTPUTDIR)/modules_cmds $(IMPORT_MODULES_CMDS))))
 CONF_DIR := $(firstword $(wildcard $(addsuffix /$(MODULE), \
     $(SUPPORT_OUTPUTDIR)/modules_conf $(IMPORT_MODULES_CONF))))
-CLASSES_DIR := $(wildcard $(JDK_OUTPUTDIR)/modules/$(MODULE))
+CLASSES_DIR := $(wildcard $(JDK_OUTPUTDIR)/../jdk_copy/modules/$(MODULE))
 INCLUDE_HEADERS_DIR := $(firstword $(wildcard $(addsuffix /$(MODULE), \
     $(SUPPORT_OUTPUTDIR)/modules_include $(IMPORT_MODULES_INCLUDE_HEADERS))))
 MAN_DIR := $(firstword $(wildcard $(addsuffix /$(MODULE), \
@@ -99,7 +99,7 @@
 # the actual command. Filter that out using wildcard before adding to DEPS.
 DEPS += $(wildcard $(JMOD_CMD))
 ifeq ($(EXTERNAL_BUILDJDK), false)
-  DEPS += $(call CacheFind, $(JDK_OUTPUTDIR)/modules/jdk.jlink/jdk/tools/jmod)
+  DEPS += $(call CacheFind, $(JDK_OUTPUTDIR)/../jdk_copy/modules/jdk.jlink/jdk/tools/jmod)
 endif
 
 # TODO: What about headers?
diff --git a/make/InterimImage.gmk b/make/InterimImage.gmk
--- a/make/InterimImage.gmk
+++ b/make/InterimImage.gmk
@@ -39,7 +39,7 @@
 JMODS := $(patsubst %, $(IMAGES_OUTPUTDIR)/jmods/%.jmod, $(INTERIM_IMAGE_MODULES))
 
 JLINK_TOOL := $(JLINK) \
-    --module-path $(IMAGES_OUTPUTDIR)/jmods \
+    --modulepath $(IMAGES_OUTPUTDIR)/jmods \
     --endian $(OPENJDK_BUILD_CPU_ENDIAN)
 
 $(INTERIM_IMAGE_DIR)/$(JIMAGE_TARGET_FILE): $(JMODS) \
@@ -48,7 +48,7 @@
 	$(RM) -r $(INTERIM_IMAGE_DIR)
 	$(JLINK_TOOL) \
 	    --output $(INTERIM_IMAGE_DIR) \
-	    --add-modules $(INTERIM_MODULES_LIST)
+	    --addmods $(INTERIM_MODULES_LIST)
 	$(TOUCH) $@
 
 TARGETS += $(INTERIM_IMAGE_DIR)/$(JIMAGE_TARGET_FILE)
diff --git a/make/Main.gmk b/make/Main.gmk
--- a/make/Main.gmk
+++ b/make/Main.gmk
@@ -233,6 +233,21 @@
 
 ALL_TARGETS += $(LAUNCHER_TARGETS)
 
+###############################################################################
+# OpenJ9 target compile j9 classes
+
+ifeq ($(BUILD_OPENJ9), true)
+j9vm-compose:
+	+($(CD) $(SRC_ROOT)/openj9 && $(MAKE) -f OpenJ9.mk compose)
+
+j9vm-merge:
+	+($(CD) $(SRC_ROOT)/openj9 && $(MAKE) -f OpenJ9.mk merge_module)
+
+j9vm-build:
+	+($(CD) $(SRC_ROOT)/openj9 && $(MAKE) -f OpenJ9.mk build-j9)
+endif
+
+
 ################################################################################
 # Build hotspot target
 
@@ -349,7 +364,7 @@
 docs-zip:
 	+($(CD) $(SRC_ROOT)/make && $(MAKE) $(MAKE_ARGS) -f Javadoc.gmk docs-zip)
 
-ALL_TARGETS += docs-javadoc docs-copy docs-zip
+ALL_TARGETS += docs-copy docs-zip
 
 ################################################################################
 # Cross compilation support
@@ -384,7 +399,7 @@
 	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) $(MAKE_ARGS) -f GenerateClasslist.gmk)
 endif
 
-ALL_TARGETS += interim-image generate-classlist
+ALL_TARGETS += interim-image
 
 ################################################################################
 # Build tests
@@ -435,8 +450,8 @@
 	     -f BuildFailureHandler.gmk images)
 endif
 
-ALL_TARGETS += prepare-test-image build-test-hotspot-jtreg-native \
-    test-image-hotspot-jtreg-native build-test-jdk-jtreg-native \
+ALL_TARGETS += prepare-test-image\
+    build-test-jdk-jtreg-native \
     test-image-jdk-jtreg-native build-test-lib build-test-failure-handler \
     test-failure-handler test-image-failure-handler test-image-hotspot-gtest
 
@@ -632,16 +647,16 @@
   ifeq ($(CREATE_BUILDJDK), true)
     # Avoid calling create-buildjdk from within a create-buildjdk call.
     ifneq ($(CREATING_BUILDJDK), true)
-      $(JMOD_TARGETS): create-buildjdk
+      $(JMOD_TARGETS): j9vm-merge create-buildjdk
       buildtools-modules: create-buildjdk
     else
       # While actually creating the buildjdk, the default deps applies.
-      $(JMOD_TARGETS): $(DEFAULT_JMOD_DEPS)
+      $(JMOD_TARGETS): j9vm-merge $(DEFAULT_JMOD_DEPS)
     endif
   else
     # The normal non cross compilation case uses the default deps.
     # To avoid races with the optimize target, that also needs to happen first.
-    $(JMOD_TARGETS): $(DEFAULT_JMOD_DEPS) exploded-image-optimize
+    $(JMOD_TARGETS): j9vm-merge $(DEFAULT_JMOD_DEPS) exploded-image-optimize
   endif
 
   zip-security: java.base-java java.security.jgss-java java.security.jgss-libs \
@@ -677,7 +692,7 @@
   # populated (java, copy and gendata targets) and the basic libs and launchers
   # have been built.
   exploded-image-optimize: java copy gendata java.base-libs java.base-launchers \
-      buildtools-modules
+      buildtools-modules j9vm-build
 
   bootcycle-images: jdk-image
 
@@ -755,7 +770,9 @@
 
 launchers: $(LAUNCHER_TARGETS)
 
-jmods: $(JMOD_TARGETS)
+j9vm-merge: j9vm-build jdk.jlink-launchers exploded-image-optimize 
+
+jmods: j9vm-merge $(JMOD_TARGETS)
 
 # Explicitly declare dependency for virtual target jdk.jdwp.agent-gensrc which
 # is actually handled by jdk.jdi-gensrc
@@ -783,6 +800,7 @@
   exploded-image: exploded-image-optimize
 endif
 
+j9vm-build: buildtools-langtools 
 create-buildjdk: create-buildjdk-copy create-buildjdk-interim-image
 
 mac-bundles: mac-bundles-jdk
@@ -792,7 +810,7 @@
 
 # This target builds the product images, e.g. the JRE and JDK image
 # (and possibly other, more specific versions)
-product-images: jdk-image jre-image symbols-image exploded-image
+product-images: j9vm-build jdk-image jre-image symbols-image exploded-image
 
 # zip-security is actually a bundle, but for now it needs to be considered
 # an image until this can be cleaned up properly.
@@ -816,11 +834,14 @@
 docs-image: docs-javadoc docs-copy
 
 # This target builds the test image
-test-image: prepare-test-image test-image-hotspot-jtreg-native \
-    test-image-jdk-jtreg-native test-image-failure-handler test-image-hotspot-gtest
+test-image: prepare-test-image \
+    test-image-jdk-jtreg-native test-image-failure-handler
 
+################################################################################
+
+j9vm-compose: all-images
 # all-images builds all our deliverables as images.
-all-images: product-images test-image docs-image
+all-images: product-images test-image
 
 # all-bundles packages all our deliverables as tar.gz bundles.
 all-bundles: product-bundles test-bundles docs-bundles
@@ -841,7 +862,7 @@
 images: product-images
 docs: docs-image
 bundles: all-bundles
-all: all-images
+all: all-images j9vm-compose
 
 ALL_TARGETS += default jdk images docs bundles all
 
diff --git a/make/common/Modules.gmk b/make/common/Modules.gmk
--- a/make/common/Modules.gmk
+++ b/make/common/Modules.gmk
@@ -62,7 +62,7 @@
     jdk.net \
     jdk.sctp \
     jdk.unsupported \
-    jdk.vm.ci \
+    com.ibm.management \
     #
 
 # to be deprivileged
diff --git a/make/common/SetupJavaCompilers.gmk b/make/common/SetupJavaCompilers.gmk
--- a/make/common/SetupJavaCompilers.gmk
+++ b/make/common/SetupJavaCompilers.gmk
@@ -32,7 +32,7 @@
 
 # If warnings needs to be non-fatal for testing purposes use a command like:
 # make JAVAC_WARNINGS="-Xlint:all -Xmaxwarns 10000"
-JAVAC_WARNINGS := -Xlint:all,-removal -Werror
+JAVAC_WARNINGS := -Xlint:all,-removal
 
 # The BOOT_JAVAC setup uses the boot jdk compiler to compile the tools
 # and the interim javac, to be run by the boot jdk.
