diff --git a/common/autoconf/boot-jdk.m4 b/common/autoconf/boot-jdk.m4
--- a/common/autoconf/boot-jdk.m4
+++ b/common/autoconf/boot-jdk.m4
@@ -524,8 +524,8 @@
     fi
   fi
 
-  JMOD="$BUILD_JDK/bin/jmod"
-  JLINK="$BUILD_JDK/bin/jlink"
+  JMOD="$BUILD_JDK/bin/jmod -J--patch-module -Jjava.base=$BUILD_JDK/../j9classes/java.base"
+  JLINK="$BUILD_JDK/bin/jlink -J--patch-module -Jjava.base=$BUILD_JDK/../j9classes/java.base"
   AC_SUBST(JMOD)
   AC_SUBST(JLINK)
 
diff --git a/common/autoconf/flags.m4 b/common/autoconf/flags.m4
--- a/common/autoconf/flags.m4
+++ b/common/autoconf/flags.m4
@@ -157,6 +157,19 @@
   CXXFLAGS="$EXTRA_CXXFLAGS"
   LDFLAGS="$EXTRA_LDFLAGS"
   CPPFLAGS=""
+
+  # Check whether --with-j9 was given.
+  BUILD_OPENJ9=false
+  AC_ARG_WITH(j9, [AS_HELP_STRING([--with-j9],
+  [Build J9 VM sources])])
+  if test "x$with-j9" != x; then
+     if ! (test -d $SRC_ROOT/j9vm); then
+       AC_MSG_ERROR(["Cannot locate the path to OpenJ9 sources!"])
+     fi
+     BUILD_OPENJ9=true
+  fi
+
+  AC_SUBST(BUILD_OPENJ9)
 ])
 
 # Setup the sysroot flags and add them to global CFLAGS and LDFLAGS so
@@ -1249,6 +1249,10 @@
     $2JAVA_BASE_LDFLAGS="${$2JAVA_BASE_LDFLAGS} \
         -L\$(SUPPORT_OUTPUTDIR)/modules_libs/java.base"

+    if test "x$with-j9" != x; then
+      $2JAVA_BASE_LDFLAGS="${$2JAVA_BASE_LDFLAGS} -L\$(SUPPORT_OUTPUTDIR)/../vm"
+    fi
+
     if test "x$1" = "xTARGET"; then
       # On some platforms (mac) the linker warns about non existing -L dirs.
       # For any of the variants server, client or minimal, the dir matches the
diff --git a/common/autoconf/jdk-options.m4 b/common/autoconf/jdk-options.m4
--- a/common/autoconf/jdk-options.m4
+++ b/common/autoconf/jdk-options.m4
@@ -458,7 +458,10 @@
   fi
 
   AC_MSG_CHECKING([if the CDS classlist generation should be enabled])
-  if test "x$enable_generate_classlist" = "xyes"; then
+  if test "x$with-j9" != x; then
+    AC_MSG_RESULT([no])
+    ENABLE_GENERATE_CLASSLIST="false"
+  elif test "x$enable_generate_classlist" = "xyes"; then
     AC_MSG_RESULT([yes, forced])
     ENABLE_GENERATE_CLASSLIST="true"
     if test "x$ENABLE_GENERATE_CLASSLIST_POSSIBLE" = "xfalse"; then
diff --git a/common/autoconf/spec.gmk.in b/common/autoconf/spec.gmk.in
--- a/common/autoconf/spec.gmk.in
+++ b/common/autoconf/spec.gmk.in
@@ -568,8 +568,11 @@
 JAVAC_FLAGS?=@JAVAC_FLAGS@
 
 
-BUILD_JAVA_FLAGS := @BOOTCYCLE_JVM_ARGS_BIG@
+BUILD_JAVA_FLAGS := @BOOTCYCLE_JVM_ARGS_BIG@ --patch-module java.base=@FIXPATH@$(BUILD_JDK)/../j9classes/java.base -Djava.lang.invoke.stringConcat=BC_SB
+BUILDJAVA_FLAGS_JAVAC := -J--patch-module -Jjava.base=@FIXPATH@$(BUILD_JDK)/../j9classes/java.base -J-Djava.lang.invoke.stringConcat=BC_SB
 BUILD_JAVA=@FIXPATH@ $(BUILD_JDK)/bin/java $(BUILD_JAVA_FLAGS)
+BUILD_JAVAC=@FIXPATH@ $(BUILD_JDK)/bin/javac $(BUILDJAVA_FLAGS_JAVAC)
+BUILD_JAVAP=@FIXPATH@ $(BUILD_JDK)/bin/javap $(BUILDJAVA_FLAGS_JAVAC)
 
 # Use ?= as this can be overridden from bootcycle-spec.gmk
 BOOT_JDK_MODULAR ?= @BOOT_JDK_MODULAR@
@@ -617,6 +621,10 @@
   RC_FLAGS:=@RC_FLAGS@
 endif
 
+
+# OpenJ9 build flag
+BUILD_OPENJ9:=@BUILD_OPENJ9@
+
 # Tools adhering to a minimal and common standard of posix compliance.
 AWK:=@AWK@
 BASENAME:=@BASENAME@
diff --git a/make/Images.gmk b/make/Images.gmk
--- a/make/Images.gmk
+++ b/make/Images.gmk
@@ -41,6 +41,8 @@
 # All modules for the current target platform.
 ALL_MODULES := $(call FindAllModules)
 
+#ALL_MODULES += com.ibm.management
+
 $(eval $(call ReadImportMetaData))
 
 JRE_MODULES += $(filter $(ALL_MODULES), $(BOOT_MODULES) \
diff --git a/make/common/Modules.gmk b/make/common/Modules.gmk
--- a/make/common/Modules.gmk
+++ b/make/common/Modules.gmk
@@ -63,7 +63,7 @@
     jdk.net \
     jdk.sctp \
     jdk.unsupported \
-    jdk.internal.vm.ci \
+    #com.ibm.management \
     #
 
 # to be deprivileged
@@ -168,7 +168,6 @@
 
 TOP_SRC_DIRS += \
     $(CORBA_TOPDIR)/src \
-    $(HOTSPOT_TOPDIR)/src \
     $(JDK_TOPDIR)/src \
     $(LANGTOOLS_TOPDIR)/src \
     $(JAXP_TOPDIR)/src \
diff --git a/make/Main.gmk b/make/Main.gmk
index 18d92b0..d46f8b2 100644
--- a/make/Main.gmk
+++ b/make/Main.gmk
@@ -238,6 +238,24 @@ $(eval $(call DeclareRecipesForPhase, LAUNCHER, \
 
 ALL_TARGETS += $(LAUNCHER_TARGETS)
 
+###############################################################################
+# OpenJ9 target compile j9 classes
+
+ifeq ($(BUILD_OPENJ9), true)
+j9vm-compose:
+	+($(CD) $(SRC_ROOT)/openj9 && $(MAKE) -f OpenJ9.mk SPEC=$(SPEC) compose)
+
+j9vm-compose-buildjvm: j9vm-build generate-j9jcl
+	+($(CD) $(SRC_ROOT)/openj9 && $(MAKE) -f OpenJ9.mk SPEC=$(SPEC) compose-buildjvm)
+
+generate-j9jcl:
+	+($(CD) $(SRC_ROOT)/openj9 && $(MAKE) -f OpenJ9.mk SPEC=$(SPEC) generate-j9jcl-sources)
+
+j9vm-build:
+	+($(CD) $(SRC_ROOT)/openj9 && $(MAKE) -f OpenJ9.mk SPEC=$(SPEC) build-j9)
+endif
+
+
 ################################################################################
 # Build hotspot target
 
@@ -293,7 +311,7 @@ ALL_TARGETS += generate-summary
 ################################################################################
 # Jmod targets
 
-JMOD_MODULES := $(ALL_MODULES)
+JMOD_MODULES := $(ALL_MODULES) #com.ibm.management
 JMOD_TARGETS := $(addsuffix -jmod, $(JMOD_MODULES))
 
 define DeclareJmodRecipe
@@ -609,7 +627,7 @@ else
   generate-exported-symbols: java.base-libs jdk.jdwp.agent-libs
 
   # Building one JVM variant is enough to start building the other libs
-  $(LIBS_TARGETS): hotspot-$(JVM_VARIANT_MAIN)-libs
+  $(LIBS_TARGETS): j9vm-build
 
   $(LAUNCHER_TARGETS): java.base-libs
 
@@ -682,7 +700,7 @@ else
   endif
 
   # Building java.base-jmod requires all of hotspot to be built.
-  java.base-jmod: hotspot
+  java.base-jmod: j9vm-build j9vm-compose-buildjvm 
 
   # Declare dependencies from <module>-jmod to all other module targets
   # When creating a BUILDJDK, the java compilation has already been done by the
@@ -708,7 +726,7 @@ else
   # in java.base-copy) and tzdb.dat (done in java.base-gendata) to the
   # appropriate location otherwise jimage, jlink and jmod won't start. This
   # also applies when creating the buildjdk.
-  DEFAULT_JMOD_DEPS := java.base-libs java.base-copy java.base-gendata \
+  DEFAULT_JMOD_DEPS := j9vm-compose-buildjvm java.base-libs java.base-copy java.base-gendata \
       jdk.jlink-launchers
   # When cross compiling and buildjdk is to be created, depend on creating the
   # buildjdk instead of the default dependencies.
@@ -768,14 +786,14 @@ else
   # populated (java, copy and gendata targets) and the basic libs and launchers
   # have been built.
   exploded-image-optimize: java copy gendata java.base-libs java.base-launchers \
-      buildtools-modules
+      buildtools-modules j9vm-build 
 
   bootcycle-images: jdk-image
 
   docs-javadoc: $(GENSRC_TARGETS) rmic
 
   # The gensrc step for jdk.jdi creates an html file that is used by docs-copy.
-  docs-copy: hotspot-$(JVM_VARIANT_MAIN)-gensrc jdk.jdi-gensrc
+  docs-copy: jdk.jdi-gensrc
 
   docs-zip: docs-javadoc docs-copy
 
@@ -838,7 +856,7 @@ endif
 # Virtual targets without recipes
 
 buildtools: buildtools-langtools interim-langtools interim-rmic \
-    buildtools-jdk buildtools-hotspot
+    buildtools-jdk
 
 hotspot: $(HOTSPOT_VARIANT_TARGETS) hotspot-jsig
 
@@ -881,7 +899,7 @@ $(foreach m, $(LAUNCHER_MODULES), $(eval $m: $m-launchers))
 $(foreach m, $(ALL_COPY_MODULES), $(eval $m: $m-copy))
 
 # Building java.base includes building all of hotspot.
-java.base: hotspot
+java.base: generate-j9jcl j9vm-build
 
 demos: demos-jdk
 
@@ -896,6 +914,8 @@ ifneq ($(COMPILE_TYPE), cross)
   exploded-image: exploded-image-optimize
 endif
 
+j9vm-build: buildtools-langtools 
+java.base-libs: j9vm-build
 create-buildjdk: create-buildjdk-copy create-buildjdk-interim-image
 
 mac-bundles: mac-bundles-jdk
@@ -905,7 +925,7 @@ mac-bundles: mac-bundles-jdk
 
 # This target builds the product images, e.g. the JRE and JDK image
 # (and possibly other, more specific versions)
-product-images: jdk-image jre-image symbols-image exploded-image
+product-images: j9vm-build jdk-image jre-image symbols-image exploded-image
 
 # zip-security is actually a bundle, but for now it needs to be considered
 # an image until this can be cleaned up properly.
@@ -932,11 +952,14 @@ endif
 docs-image: docs-javadoc docs-copy

 # This target builds the test image
-test-image: prepare-test-image test-image-hotspot-jtreg-native \
-    test-image-jdk-jtreg-native test-image-failure-handler test-image-hotspot-gtest
+test-image: prepare-test-image \
+    test-image-jdk-jtreg-native test-image-failure-handler
+
+################################################################################

+j9vm-compose: all-images
 # all-images builds all our deliverables as images.
-all-images: product-images test-image docs-image
+all-images: product-images test-image

 # all-bundles packages all our deliverables as tar.gz bundles.
 all-bundles: product-bundles test-bundles docs-bundles
@@ -960,7 +983,7 @@ jdk: exploded-image
 images: product-images
 docs: docs-image
 bundles: all-bundles
-all: all-images
+all: all-images j9vm-compose
 
 ALL_TARGETS += default jdk images docs bundles all
 
